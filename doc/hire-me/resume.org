#+TITLE:   Resume
#+AUTHOR:  Jeremy Hughes
#+EMAIL:   jedahu@gmail.com
#+DATE:    <2016-08-08 Mon> 
#+OPTIONS: toc:1

#+HTML_NAV: _nav.org

* Introduction                                                        :notoc:
:PROPERTIES:
:HTML_CONTAINER_CLASS: hide
:END:
#+NAME: motivation
#+BEGIN_MOTIVATION
#+END_MOTIVATION

#+BEGIN_VERSE
Jeremy Hughes
jedahu@gmail.com
021 172 6710
https://jedahu.github.io/
#+END_VERSE

* Profile overview

I have over 10 years experience in designing and writing computer programs. Most
recently I have been focused on optimizing the SDLC process at Takeflite
Solutions and writing standard libraries for their next-gen products.

I am an accomplished programmer with hands on experience in large complex
programs and greenfields development in both front-end and back-end capacities.

I have particular expertise in type-safe abstraction and functional programming.
I find using them results in code that is safer, more composable, easier to
reason about and test, and more likely to be correct.

I have hands on experience with modern SDLC practices, Agile methodologies
including Scrum and Kanban, library design and versioning, property-based
testing, and continuous integration and deployment.

* Relevant experience

** Takeflite Solutions Ltd /Developer/ *June 2015 – Present*
Full stack developer on the web app team. I fulfilled two roles: SDLC
improvement, and web development.

In the SDLC role I introduced technical and business cases for modern practices.
I implemented their integration into company operations and provided education
in high level concepts and technical details.

In the developer role I performed both a BAU function and wrote foundational
libraries for a next-gen project.

Key SDLC achievements:

- Distributed source control with Git and Github. Introduced the technical
  utility of branching and merging for parallel feature development and code
  review. Set up a company Github account.
- Continuous integration, testing, and deployment. Changed the deploy process
  from manual and ad-hoc to automatic and repeatable. Wrote bespoke build
  scripts in Powershell for integration with the AppVeyor and Visual Studio Team
  Services continuous deployment services.
- Unit testing and property-based testing. Introduced the technical benefits of
  programmatic testing and the business case for catching regressions. Wrote a
  C# library for property-based testing on top of Xunit and FsCheck.
- Feature and issue management. Introduced Trello for business-level feature and
  roadmap management. Introduced Github issues as a developer centric tool for
  tracking tasks and issues.
- Communication channels. Introduced slack.com for logged intra-company
  communication and for event aggregation from CI servers and production apps.

Key development achievements:

- A web-server library in C# that had statically tracked effects, compiler checked
  authorization, and an implementation of MVC that used types to separate the
  responsibilities of model, view, and controller, ensuring violations were
  caught at compile time.
- A Purescript library for type-checked server-client RPC. It was designed so
  that compilation would fail if the server and client types were not the same,
  thus preventing deployment of an out-of-sync server and client.
- A storage library in C# that used Github as a backend. Designed to keep
  modification history and enable simple rollback of storage state.

** Trade Me /Developer/ *July 2013 – June 2015*
I worked first on Trade Me’s BAU team, fixing bugs and implementing small
features where the emphasis was on speed and efficiency. The team used Kanban to
continuously pull work off a prioritized backlog.

Later, on the Marketplace team I was responsible for developing larger projects,
often with fixed public-holiday related deadlines. This team was small and
cross-functional. I worked closely with the team BA and the team’s developers,
designers, and testers in fortnightly Scrum sprints.

We used Asp.NET, C#, SQL Server, and Javascript to create solutions that were
fast and cross-browser compatible. We continuously tested feature branches on a
TeamCity server and deployed up to twice a day.

** Self employed /Developer/ *2011 – 2012*
Sole developer of a vector graphics app for the Web and Android: an editor and
player for vector animation with pause points and story branching. It was
intended for presentations.

Written in Clojure and Clojurescript, it used key-frames and affine
transformations to move objects around a canvas, and a vertex interpolation
algorithm to morph between shapes.

Key challenges I overcame:
- Creating a visually simple yet functional UI for editing key-frames and branch
  points.
- Writing a state machine for editing and playback which allowed for transitions
  between arbitrary key-frames.

Revenue was to come from purchases of the editor app, with the viewer being free
to use.

Financial constraints necessitated a return to conventional employment before
the project was complete. Key lessons learned from this failure were the
importance of creating a minimum viable product first and sticking to a clearly
defined goal of business success.

** Victoria University /Developer/ *2009 – 2010*
Contracted to write multi-channel real-time audo processing programs. I wrote
them in C on Linux using the JACK API, Pthreads, and lock-free data structures.

** Victoria University /Developer/ *2006 – 2007*
Contracted to write a cross platform desktop application demonstrating
statistical mediation and moderation. I wrote it in Scala on the JVM with SVG
for graph output.

* Education

Massey University, Computer Science (incomplete) 

* Open source projects

** Get Typed (https://gettyped.github.io)
My latest project. An attempt to convey the utility of static typing by
providing examples of types that enforce valuable compile-time guarantees. My
goal is to create a small compendium of type descriptions, implementations in
various languages, and examples of use.

The project is also an exploration into literate programming. Code is generated
by the docuementation, ensuring both stay in sync.

** Sharper library (https://github.com/sharper-library/)
A library of type safe data structures and control structures for C#, written
and rewritten over the last four years to investigate the practical limits of
C#’s type system and to provide some support for functional programming.

The library includes:
- An effect tracking monad.
- A trampoline monad for stack-free recursion.
- A resource monad for lazy yet deterministic resource disposal.
- A maybe type for elimination of null pointer errors.
- A lazy list for memoized enumeration.

* Skills

*Lang .NET:* C#, F#, Powershell

*Lang JS:* Purescript, Flow, Typescript, Javascript

*Lang other:* Haskell, Scala, Clojure, Java, Python, SQL, XSLT

*Tools:* Git, Bash, Emacs, Vim, Visual Studio

*Libraries|Frameworks:* ASP Core, FsCheck, dotnet cli, React, jQuery, Node

*Cloud:* AWS, Azure, REST, typed RPC, OAuth, OpenID

*Types|FP:* sum types, higher kinds, applicatives, monad transformers, lenses,
effects, map-reduce

*OS:* Linux, NixOS, Windows
